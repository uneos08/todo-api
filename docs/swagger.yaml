basePath: /api
definitions:
  handlers.updateUserInput:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  handlers.userCredentials:
    properties:
      password:
        example: password123
        type: string
      username:
        example: user1
        type: string
    type: object
  models.GeneralResponse:
    properties:
      data: {}
      errors:
        description: '[]string или map[string]string'
      message:
        type: string
      meta:
        description: Доп. инфо (пагинация и др.)
      status:
        type: string
    type: object
  models.Todo:
    properties:
      done:
        type: boolean
      photo_url:
        type: string
      title:
        type: string
    type: object
  models.User:
    properties:
      id:
        type: integer
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Simple ToDo API with PostgreSQL and Go.
  title: ToDo API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handlers.userCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.GeneralResponse'
            - properties:
                data:
                  properties:
                    token:
                      type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.GeneralResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.GeneralResponse'
      summary: User login
      tags:
      - auth
  /refresh:
    post:
      consumes:
      - application/json
      description: Use refresh token to get new access and refresh tokens
      parameters:
      - description: Refresh token
        in: body
        name: token
        required: true
        schema:
          properties:
            refresh_token:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.GeneralResponse'
            - properties:
                data:
                  properties:
                    ' refresh_token':
                      type: string
                    access_token:
                      type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.GeneralResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.GeneralResponse'
      summary: Refresh JWT tokens
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with username and password
      parameters:
      - description: User registration info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.userCredentials'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GeneralResponse'
      summary: Register a new user
      tags:
      - auth
  /todos:
    get:
      description: Получить список всех задач
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.GeneralResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Todo'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GeneralResponse'
      summary: Get all todos
      tags:
      - todos
    post:
      consumes:
      - application/json
      description: Создать новую задачу
      parameters:
      - description: Todo data
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.Todo'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Todo'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GeneralResponse'
      summary: Create a new todo
      tags:
      - todos
  /todos/{id}:
    delete:
      description: Удалить задачу по ID
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/models.GeneralResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.GeneralResponse'
      summary: Delete a todo by ID
      tags:
      - todos
    get:
      description: Получить задачу по ID
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Todo'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.GeneralResponse'
      summary: Get a todo by ID
      tags:
      - todos
    put:
      consumes:
      - application/json
      description: Обновить задачу по ID
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated todo data
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.Todo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Todo'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.GeneralResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.GeneralResponse'
      summary: Update a todo by ID
      tags:
      - todos
  /users:
    get:
      description: Retrieve list of all users (passwords omitted)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.GeneralResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.User'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GeneralResponse'
      summary: Get all users
      tags:
      - users
  /users/{id}:
    delete:
      description: Delete user by given ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GeneralResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GeneralResponse'
      summary: Delete user by ID
      tags:
      - users
    get:
      description: Get user details by user ID (password omitted)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.GeneralResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.GeneralResponse'
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user data (password will be hashed if provided)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.updateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.GeneralResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.GeneralResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GeneralResponse'
      summary: Update user by ID
      tags:
      - users
swagger: "2.0"
